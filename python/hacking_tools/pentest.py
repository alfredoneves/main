#!/usr/bin/python3
# this program executes basic scans in an url and saves the results
# attention to the wordlists used and to their path that can change
# https://www.linkedin.com/in/alfredo-neves-56398a218/

import subprocess
import requests
import sys

def exec_linux(command):
	"""
	Executes the linux command
	command:complete linux command to be executed
	"""
	proc = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	result = (proc.stdout.read() + proc.stderr.read()).decode()
	return result

# programs required for this script
programs = ["whois", "dig", "wafwoff", "subfinder", "nmap", "gobuster", "nikto", "the harvester"]

# name to the directory and target's url
if len(sys.argv) != 2:
	print("pentest program, example of use: ./pentest.py target.com")
	exit()
url = sys.argv[1]

# some programs require a url without http, this condition is to remove it
if "http" in url:
	slash_pos = url.index("/")
	url = url[slash_pos+2:]
	
name = f"pentest_{url}"	

# test connection
print(f"testing connection to http://{url}")
try:
	r = requests.get(f"http://{url}")
	if r:
		print(f"connection OK!---{r.status_code}")
	else:
		print(f"connection problem, but I will continue!---{r.status_code}")
except Exception as error:
	print("Connection error, please verify the address and the network! \n", error)
	exit()

# commands
whois = f"whois {url} >> {name}/whois_results.txt"	# whois lookup for the first domain
dig = f"dig -t ANY {url} >> {name}/dig_results.txt"	# digs all types of DNS's
wafwoof = "wafw00f -v {url} -o {name}/wafwoof_results.txt"	# detection of firewall
subfinder = f"subfinder -d {url} -o {name}/subfinder_results.txt"	# creates lists of subdomains
nmap = f"sudo nmap -sS -O -sV -sC -v -iL {name}/subfinder_resuts.txt -oN {name}/nmap_results.txt"	
nikto = f"nikto -h {url} -o {name}/nikto_results.txt"
gospider = f"gospider -s https://{url} -u web -d 4 --robots --sitemap >> {name}/gospider_results.txt"
theHarvester = f"theHarvester -d {url} -b duckduckgo,yahoo,bing,hackertarget >> {name}/theHarvester_results.txt"

# list of commands that are going to me executed 
commands_list = [f"mkdir {name}", whois, dig, wafwoof, subfinder, nmap, nikto, gospider]

# executes the commands from the list (use 1 thread to divide direct and indirect contact with the target in the future)
for command in commands_list:
	try:
		print(f"command beeing executed: {command}")
		exec_linux(command)
	except Exception as error:
		print(error)
		
# gobuster loop for subdomain
subdomains = open(name + "/subfinder_results.txt", "r")
for subdomain in subdomains:
	subdomain = subdomain.strip()
	exec_linux(f"gobuster dir -w /usr/share/dirb/wordlists/big.txt -u {subdomain} -t 16 -x php,txt,sql,cgi,sh,html,js,py,bkp,bak,src,inc,old,pdf -o {name}/gobuster_results.txt")	# change the extensions
subdomains.close()


print("finished")

